Let’s start by creating a model and database table to hold our administrators’
usernames and passwords. Rather than store passwords in plain text, we’ll
store a digest hash value of the password. By doing so, we ensure that even
if our database is compromised, the hash won’t reveal the original password,
so it can’t be used to log in as this user using the forms:

depot> rails generate scaffold User name:string password:digest

We declare the password as a digest type, which is another one of the nice
extra touches that Rails provides. Now run the migration as usual:

depot> rails db:migrate

Next we have to flesh out the user model:

rails50/depot_r/app/models/user.rb

class User < ApplicationRecord
=>  validates :name, presence: true, uniqueness: true
    has_secure_password
end

To support the 'has_secure_password' you need to have the bcrypt gem in the gemfile
and for it to be installed.  Check that!

Administering Our Users
In addition to the model and table we set up, we already have some scaffolding
generated to administer the model. Let’s go through it and make some tweaks
as necessary.
We start with the controller. It defines the standard methods: index(), show(),
new(), edit(), update(), and delete(). By default, Rails omits the unintelligible
password hash from the view. 

This means that in the case of users, there
isn’t much to show(), except a name. So, let’s avoid the redirect to showing the
user after a create operation. Instead, let’s redirect to the user’s index and
add the username to the flash notice:

rails50/depot_r/app/controllers/users_controller.rb
#...
def create
@user = User.new(user_params)
respond_to do |format|
  if @user.save
=>  format.html { redirect_to users_url, notice: "User #{@user.name} was successfully created." }
    format.json { render :show, status: :created, location: @user }
  else
    format.html { render :new }
    format.json { render json: @user.errors, status: :unprocessable_entity }
  end
 end
end
#...

Let’s do the same for an update operation:

#...
def update
 respond_to do |format|
  if @user.update(user_params)
=>  format.html { redirect_to users_url, notice: "User #{@user.name} was successfully updated." }
    format.json { render :show, status: :ok, location: @user }
  else
    format.html { render :edit }
    format.json { render json: @user.errors, status: :unprocessable_entity }
  end
 end
end
#...

While we are here, let’s also order the users returned in the index by name:

#...
def index
=>  @users = User.order(:name)
end
#...

Now that the controller changes are done, let’s attend to the view. We may need
to update the form used both to create a new user and to update an existing
user. Note that this form is already bootstrapped set up to show the password and password
confirmation fields. 

To improve the appearance of the page, we may add a <legend>
tag. Look at the non-bootstrapped version below and see if additional changes might be needed.

rails50/depot_r/app/views/users/_form.html.erb

<div class="depot_form">
<%= form_for @user do |f| %>
<% if @user.errors.any? %>
<div id="error_explanation">
 <h2><%= pluralize(@user.errors.count, "error") %> prohibited this user from being saved:</h2>
  <ul>
    <% @user.errors.full_messages.each do |msg| %>
    <li><%= msg %></li>
    <% end %>
  </ul>
</div>
<% end %>
<fieldset>
  <legend>Enter User Details</legend>
  <div class="field">
   <%= f.label :name, 'Name:' %>
   <%= f.text_field :name, size: 40 %>
  </div>
  <div class="field">
   <%= f.label :password, 'Password:' %>
   <%= f.password_field :password, size: 40 %>
  </div>
  <div class="field">
   <%= f.label :password_confirmation, 'Confirm:' %>
   <%= f.password_field :password_confirmation, size: 40 %>
  </div>
  <div class="actions">
   <%= f.submit %>
  </div>
</fieldset>
<% end %>
</div>

Once you are satisfied with this form, try it out by going to:

https://your_demo_site_at_c9/users/new

For ease in later sections, enter the name as dave and the password as secret...

You can also test your results using the ...$ rails dbconsole
and executing the command ...> select * from users;

What happens?  Remember that Ctrl-D or .quit ends the dbconsole session.

Example dbconsole results:
jdebettencourt:~/workspace/depot (master) $ rails dbconsole
SQLite version 3.8.2 2013-12-06 14:53:30
Enter ".help" for instructions
Enter SQL statements terminated with a ";"
sqlite> select * from users;                                                                                                                                                                                     
1|dave|$2a$10$cxujFBP6LDkxTQUOPCoDWekQvglUkxCGJ.ItB7nOkeeXUhSpjZr2q|2017-03-06 22:46:28.690030|2017-03-06 22:46:28.690030
sqlite> .quit
jdebettencourt:~/workspace/depot (master) $


Authenticating Users

What does it mean to add login support for administrators of our store?

• We need to provide a form that allows them to enter a username and
password.
• Once they’re logged in, we need to record that fact somehow for the rest
of the session (or until they log out).
• We need to restrict access to the administrative parts of the application,
allowing only people who are logged in to administer the store.

We could put all of the logic into a single controller, but it makes more sense
to split it into two: 
a session controller to support logging in and out and 
an admin controller to welcome administrators:

depot> rails generate controller Sessions new create destroy

depot> rails generate controller Admin index

The SessionsController#create action will need to record something in session to say
that an administrator is logged in. Let’s have it store the ID of that person’s
User object using the key :user_id. The login code looks like this:

rails50/depot_r/app/controllers/sessions_controller.rb

#...
def create
=>  user = User.find_by(name: params[:name])
=>  if user.try(:authenticate, params[:password])
=>  session[:user_id] = user.id
=>  redirect_to admin_url
=>  else
=>  redirect_to login_url, alert: "Invalid user/password combination"
=>  end
end
#...

This code makes use of the Rails try() method, which checks to see if a variable
has a value of nil before trying to call the method. If you’re using Ruby 2.3,
you can use the version of this that’s built into the language instead:
if user&.authenticate(params[:password])

We’re also doing something else new here: using a form that isn’t directly
associated with a model object. To see how that works, let’s look at the template
for the sessions#new action from the text, but remember we want it bootstrapped
( note that it mimics parts of the .../users/_form.html.erb the unbootstrapped file
  is available at: rails50/depot_r/app/views/sessions/new.html.erb)
  
A possible bootstrapped version could be:

<h1>Sessions#new</h1>
<p>Find me in app/views/sessions/new.html.erb</p>
<div class="alert">
<% if flash[:alert] %>
<p id="notice"><%= flash[:alert] %></p>
<% end %>
</div>
<%= form_tag do %>
<fieldset>
<legend>Please Log In</legend>
<div class="form-group">
<%= label_tag :name, 'Name:' %>
<%= text_field_tag :name, params[:name], class:"form-control" %>
</div>
<div class="form-group">
<%= label_tag :password, 'Password:' %>
<%= password_field_tag :password, params[:password], class:"form-control" %>
</div>
<div class="actions">
<%= submit_tag "Login", class:"btn btn-default" %>
</div>
</fieldset>
<% end %>
</div>

This form is different from ones you saw earlier. Rather than using form_for,
it uses form_tag, which simply builds a regular HTML <form>. Inside that form,
it uses text_field_tag and password_field_tag, two helpers that create HTML <input>
tags. Each helper takes two parameters. The first is the name to give to the
field, and the second is the value with which to populate the field. This style
of form allows us to associate values in the params structure directly with form
fields—no model object is required. In our case, we choose to use the params
object directly in the form. An alternative would be to have the controller set
instance variables.

We also make use of the label_tag helpers to create HTML <label> tags. This
helper also accepts two parameters. The first contains the name of the field,
and the second contains the label to be displayed.

Note how the value of the form field is communicated
between the controller and the view via the params hash: the view gets
the value to display in the field from params[:name], and when the user submits
the form, the new field value is made available to the controller the same way.

If the user successfully logs in, we store the ID of the user record in the session
data. We’ll use the presence of that value in the session as a flag to indicate
that an administrative user is logged in.

As you might expect, the controller actions for logging out are much simpler:

rails50/depot_r/app/controllers/sessions_controller.rb

#...
def destroy
=> session[:user_id] = nil
=> redirect_to store_index_url, notice: "Logged out"
end
#...

Finally, it’s about time to add the index page—the first screen that administrators
see when they log in. Let’s make it useful. We’ll have it display the
total number of orders in our store. Create the template in the index.html.erb
file in the app/views/admin directory. (This template uses the pluralize() helper,
which in this case generates the order or orders string, depending on the cardinality
of its first parameter.)

Non-bootstrapped example from text:

rails50/depot_r/app/views/admin/index.html.erb

<h1>Welcome</h1>
It's <%= Time.now %>
We have <%= pluralize(@total_orders, "order") %>.

Remember to bootstrap this!

The index() action in the admin_controller sets up the count:

rails50/depot_r/app/controllers/admin_controller.rb

class AdminController < ApplicationController
#...
 def index
=> @total_orders = Order.count
 end
end

Unfortunately, without the scaffolding conventions
to guide it, Rails has no way of knowing which actions are to respond to GET
requests, which are to respond to POST requests, and so on, for this controller.
We need to provide this information by editing our config/routes.rb file:

rails50/depot_r/config/routes.rb (modified a bit also)

Rails.application.routes.draw do
=> get 'admin' => 'admin#index'
=> controller :sessions do
=> get 'login' => :new
=> post 'login' => :create
=> delete 'logout' => :destroy
=> end
resources :users
resources :orders
resources :line_items
resources :carts
root 'store#index', as: 'store_index'
resources :products 
# For details on the DSL available within this file, see
# http://guides.rubyonrails.org/routing.html
end

You can (and should) delete the routes provided for sessions/new, sessions/create,
and sessions/destroy.

Now try to reach .../your_test_site/login

Did it work? Good (if it did) otherwise fix up errors and get it working...



Limiting Access

We want to prevent people without an administrative login from accessing
our site’s admin pages. It turns out that it’s easy to implement using the Rails
callback facility.

Where should we put this method? It could sit directly in the admin controller,
but—for reasons that’ll become apparent shortly—let’s put it instead in ApplicationController,
the parent class of all our controllers. This is in the application_controller.rb
file in the app/controllers directory. Note too that we chose to restrict
access to this method. This prevents it from ever being exposed to end users
as an action:

rails50/depot_r/app/controllers/application_controller.rb

class ApplicationController < ActionController::Base
=> before_action :authorize
# ...
=> 
=> protected
=>
=> def authorize
=> unless User.find_by(id: session[:user_id])
=> redirect_to login_url, notice: "Please log in"
=> end
=> end
end

The before_action() line causes the authorize() method to be invoked before every
controller defined action in our application.

A good combination approach is to use this automatic blacklist and add whitelist
methods for controllers for which authorization is not required. We do this by
inserting a skip_before_action() call within the StoreController:

rails50/depot_r/app/controllers/store_controller.rb
class StoreController < ApplicationController
=> skip_before_action :authorize
include CurrentCart
before_action :set_cart
#...

And we do it again for the SessionsController class:

rails50/depot_r/app/controllers/sessions_controller.rb
class SessionsController < ApplicationController
=> skip_before_action :authorize
def new
end
#...

We’re not done yet; we need to allow people to create, update, and delete, etc. carts;
but the book based restrictions may be too severe, so use the overall skip_... and 
please make sure you have the correct def invalid_cart private method for the 
rescue_from :

rails50/depot_r/app/controllers/carts_controller.rb
class CartsController < ApplicationController
=> skip_before_action :authorize
# skip_before_action :authorize, only: [:create, :update, :destroy]
  before_action :set_cart, only: [:show, :edit, :update, :destroy]
  rescue_from ActiveRecord::RecordNotFound, with: :invalid_cart
# ...
private
# ...
def invalid_cart
 logger.error "Attempt to access invalid cart #{params[:id]}"
  redirect_to store_index_url, notice: 'Invalid cart'
 end
end # this is the last end in the file

And we also need some broader skips in line_items_controller due in part 
to my modified design, so allow them to create line items:

rails50/depot_r/app/controllers/line_items_controller.rb
class LineItemsController < ApplicationController
# skip_before_action :authorize, only: :create
=>  skip_before_action :authorize, only: [:index, :show, :new, :create]
#
include CurrentCart
before_action :set_cart, only: [:create]
before_action :set_line_item, only: [:show, :edit, :update, :destroy]
#...

We also allow them to create orders (which includes access to the new form):

rails50/depot_r/app/controllers/orders_controller.rb
class OrdersController < ApplicationController
 # skip_before_action :authorize
=> skip_before_action :authorize, only: [:new, :create]
  include CurrentCart
  before_action :set_cart, only: [:new, :create]
  before_action :ensure_cart_isnt_empty, only: [:new]
  before_action :set_order, only: [:show, :edit, :update, :destroy]
#...

Check other controllers because the base case forces all controllers to invoke
authorization - the products controller is a special problem...

class ProductsController < ApplicationController
=> skip_before_action :authorize
   before_action :set_product, only: [:show, :edit, :update, :destroy]
   
If you've added a static_pages_controller that the public should see:

class StaticPagesController < ApplicationController
=> skip_before_action :authorize
    def home
    end
#...

If adding users or checking for user.id values is a problem, then start with authorization turned off:

class UsersController < ApplicationController
=>  skip_before_action :authorize
  before_action :set_user, only: [:show, :edit, :update, :destroy]
  
then try restricting it - this is a problem later as we use the existence of a user.id in deciding 
whether or not to extend our nav bar...


With the test authorization logic in place, we can now navigate to http://localhost:3000/products. 

The callback method should intercept us on the way to the product listing
and show us the login screen instead.

Did it work?

More Administration

Let’s start with adding links to various administration functions to the 
layout and have them show up only if a :user_id is in the session
so add something like below to the navbar categories:

rails50/depot_r/app/views/layouts/application.html.erb

=>
=> <% if session[:user_id] %>
=> <ul>
=> <li><%= link_to 'Orders', orders_path %></li>
=> <li><%= link_to 'Products', products_path %></li>
=> <li><%= link_to 'Users', users_path %></li>
=> </ul>
=> <%= button_to 'Logout', logout_path, method: :delete %>
=> <% end %>


Also need to make sure we always have one admin, so look at the following
modifications to the user model and the users controller:

rails50/depot_t/app/models/user.rb
after_destroy :ensure_an_admin_remains
class Error < StandardError
end
private
def ensure_an_admin_remains
if User.count.zero?
raise Error.new "Can't delete last user"
end
end

The key concept here is the use of an exception to indicate an error when the
user is deleted. This exception serves two purposes. First, because it’s raised
inside a transaction, it causes an automatic rollback. By raising the exception
if the users table is empty after the deletion, we undo the delete and restore
that last user.

Second, the exception signals the error back to the controller, where we use
a rescue_from block to handle it and report the error to the user in the notice.
If you want only to abort the transaction but not otherwise signal an exception,
raise an ActiveRecord::Rollback exception instead, because this is the only exception
that won’t be passed on by ActiveRecord::Base.transaction:

rails50/depot_t/app/controllers/users_controller.rb
def destroy
@user.destroy
respond_to do |format|
format.html { redirect_to users_url,
notice: '"User #{@user.name} deleted"' }
format.json { head :no_content }
end
end
=> rescue_from 'User::Error' do |exception|
=> redirect_to users_url, notice: exception.message
=> end


We can use this to invoke our user model directly, having it add a user into
the database for us:
depot> bin/rails console
Loading development environment.
>> User.create(name: 'dave', password: 'secret', password_confirmation: 'secret')
=> #<User:0x2933060 @attributes={...} ... >
>> User.count
=> 1
The >> sequences are prompts.

Heroku results (after db:migrate and db:seed)

jdebettencourt:~/workspace/depot (master) $ heroku run rails console
Running rails console on ? secret-forest-38452... up, run.7753 (Free)
Loading production environment (Rails 5.0.1)
irb(main):001:0> User.create(name: 'dave', password: 'secret', password_confirmation: 'secret')
D, [2017-03-07T00:04:01.528793 #4] DEBUG -- :    (2.4ms)  BEGIN
D, [2017-03-07T00:04:01.548670 #4] DEBUG -- :   User Exists (3.7ms)  SELECT  1 AS one FROM "users" WHERE "users"."name" = $1 LIMIT $2  [["name", "dave"], ["LIMIT", 1]]
D, [2017-03-07T00:04:01.552662 #4] DEBUG -- :   SQL (2.0ms)  INSERT INTO "users" ("name", "password_digest", "created_at", "updated_at") VALUES ($1, $2, $3, $4) RETURNING "id"  [["name", "dave"], ["password_digest", "$2a$10$/nRG32xCKMEp.IMAn2WBQeeRH4h4yvNQD0hnzv/jSKZCIEpxcd1Ka"], ["created_at", 2017-03-07 00:04:01 UTC], ["updated_at", 2017-03-07 00:04:01 UTC]]
D, [2017-03-07T00:04:01.560711 #4] DEBUG -- :    (7.4ms)  COMMIT
=> #<User id: 1, name: "dave", password_digest: "$2a$10$/nRG32xCKMEp.IMAn2WBQeeRH4h4yvNQD0hnzv/jSKZ...", created_at: "2017-03-07 00:04:01", updated_at: "2017-03-07 00:04:01">
irb(main):002:0> User.count
D, [2017-03-07T00:05:05.480635 #4] DEBUG -- :    (2.0ms)  SELECT COUNT(*) FROM "users"
=> 1
irb(main):003:0> exit

jdebettencourt:~/workspace/depot (master) $ heroku run rails console
Running rails console on ? secret-forest-38452... up, run.1217 (Free)
Loading production environment (Rails 5.0.1)
irb(main):001:0> User.count
D, [2017-03-07T00:07:33.804574 #4] DEBUG -- :    (1.6ms)  SELECT COUNT(*) FROM "users"
=> 1
irb(main):002:0> Product.count
D, [2017-03-07T00:07:44.450399 #4] DEBUG -- :    (1.6ms)  SELECT COUNT(*) FROM "products"
=> 3
irb(main):003:0> exit
jdebettencourt:~/workspace/depot (master) $ 

And, now, clean it up and get your new data into the application.
