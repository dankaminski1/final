Fix for Invalid Carts

1. enter the URL like .../carts/wibble instead of .../carts/6 (assuming that cart 6 is a good cart id)

generates an error from around line 67 in the cart controller...   @cart = Cart.find(params[:id])

error reported as>>>  ActiveRecord::RecordNotFound in CartsController#show

create a Rails flash (e.g. an alert) to handle
and modify both the carts_controller and the lin_items controller to make URL munging harder


2. fix carts controller with a 'rescue_from' that uses a private 'invalid_cart' method

add the 'rescue_from'

class CartsController < ApplicationController
  before_action :set_cart, only: [:show, :edit, :update, :destroy]
  rescue_from ActiveRecord::RecordNotFound, with: :invalid_cart
  # GET /carts
  # GET /carts.json
#...

implement the 'invalid_cart' method at the bottom of the controller inside the 'private' section

# ...
  private
  # ...

    def set_cart
      @cart = Cart.find(params[:id])
    end

    # Never trust parameters from the scary internet, only allow the white list through.
    def cart_params
      params.fetch(:cart, {})
    end
    def invalid_cart
      logger.error "Attempt to access invalid cart #{params[:id]}"
      redirect_to store_index_url, notice: 'Invalid cart'
    end
end

3. test


4. modify line_items_controller to limit access to currently valid cart_ids using 'def line_items_params' for control

    # Never trust parameters from the scary internet, only allow the white list through.
    def line_item_params
    #  params.require(:line_item).permit(:product_id, :cart_id)
    params.require(:line_item).permit(:product_id)
    end
end

see how we restricted use of externally specified 'cart_id'




Empty the Cart; present Totals


5. add empty cart button to shopping cart in /app/views/carts/show.html.erb 

<%= button_to 'Empty cart', @cart, method: :delete, data: { confirm: 'Are you sure?' } %>


6. modify the carts controller to support the destroy method 
	
	If HTTP/S verb is: DELETE 
	Then Ruby on Rails equates it to a 'controller_name#destroy'
	
	
  # DELETE /carts/1
  # DELETE /carts/1.json
  def destroy
    @cart.destroy if @cart.id == session[:cart_id]
    session[:cart_id] = nil
    respond_to do |format|
      format.html { redirect_to store_index_url,
        notice: 'Your cart is currently empty' }
      format.json { head :no_content }
    end
  end

  # ...
  

7. don't need the notice when adding items to shopping cart so change the create/save actions in /app/controllers/line_items_controller.rb

      if @line_item.save
        format.html { redirect_to @line_item.cart }
        # format.html { redirect_to @line_item.cart, notice: 'Line item was successfully created.' }


8. clean up display for the new items and summary items we want to see in /app/views/carts/show.html.erb; with some bootstrap...

<div class="panel-body">
 <table class="table table-responsive">
    
    <% @cart.line_items.each do |item| %>
    <tr>
    <td><%= item.quantity %> &times; </td><td><%= item.product.title %></td><td><%= number_to_currency(item.total_price) %></td>
    </tr>
    <% end %>
    <tr>
    <td colspan="2">Total Order Value </td><td><%= number_to_currency(@cart.total_price) %></td>
    </tr>
 </table>
</div>


9. before we can get this to run, the models need to be updated as well to handle the calculation of totals

rails50/depot_i/app/models/line_item.rb
def total_price
product.price * quantity
end

rails50/depot_i/app/models/cart.rb
def total_price
line_items.to_a.sum { |item| item.total_price }
end

10. add a keep shopping button to the cart view in app/views/carts/show.html.erb

<%= link_to 'Keep Shopping', store_index_url , class:"btn btn-primary" %>
  
  
  




